// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImgMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "ImgMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Time::Time()
{
    // m_time_stamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@63440df3
    m_time_stamp = 0;

}

Time::~Time()
{
}

Time::Time(const Time &x)
{
    m_time_stamp = x.m_time_stamp;
}

Time::Time(Time &&x)
{
    m_time_stamp = x.m_time_stamp;
}

Time& Time::operator=(const Time &x)
{

    m_time_stamp = x.m_time_stamp;

    return *this;
}

Time& Time::operator=(Time &&x)
{

    m_time_stamp = x.m_time_stamp;

    return *this;
}

size_t Time::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment = 6502832;
    return current_alignment - initial_alignment;
}

size_t Time::getCdrSerializedSize(const Time& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void Time::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_time_stamp;
}

void Time::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_time_stamp;
}

/*!
 * @brief This function sets a value in member time_stamp
 * @param _time_stamp New value for member time_stamp
 */
void Time::time_stamp(uint64_t _time_stamp)
{
m_time_stamp = _time_stamp;
}

/*!
 * @brief This function returns the value of member time_stamp
 * @return Value of member time_stamp
 */
uint64_t Time::time_stamp() const
{
    return m_time_stamp;
}

/*!
 * @brief This function returns a reference to member time_stamp
 * @return Reference to member time_stamp
 */
uint64_t& Time::time_stamp()
{
    return m_time_stamp;
}


size_t Time::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Time::isKeyDefined()
{
   return false;
}

void Time::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

ImgHeader::ImgHeader()
{
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f71c76a
    m_seq = 0;
    // m_stamp com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@1d7acb34

    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@48a242ce
    m_frame_id ="";

}

ImgHeader::~ImgHeader()
{



}

ImgHeader::ImgHeader(const ImgHeader &x)
{
    m_seq = x.m_seq;
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
}

ImgHeader::ImgHeader(ImgHeader &&x)
{
    m_seq = x.m_seq;
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

ImgHeader& ImgHeader::operator=(const ImgHeader &x)
{

    m_seq = x.m_seq;
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;

    return *this;
}

ImgHeader& ImgHeader::operator=(ImgHeader &&x)
{

    m_seq = x.m_seq;
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);

    return *this;
}

size_t ImgHeader::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ImgHeader::getCdrSerializedSize(const ImgHeader& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;


    return current_alignment - initial_alignment;
}

void ImgHeader::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_seq;
    scdr << m_stamp;
    scdr << m_frame_id;
}

void ImgHeader::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_stamp;
    dcdr >> m_frame_id;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void ImgHeader::seq(uint64_t _seq)
{
m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint64_t ImgHeader::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint64_t& ImgHeader::seq()
{
    return m_seq;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void ImgHeader::stamp(const Time &_stamp)
{
m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void ImgHeader::stamp(Time &&_stamp)
{
m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const Time& ImgHeader::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
Time& ImgHeader::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void ImgHeader::frame_id(const std::string &_frame_id)
{
m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void ImgHeader::frame_id(std::string &&_frame_id)
{
m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& ImgHeader::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& ImgHeader::frame_id()
{
    return m_frame_id;
}

size_t ImgHeader::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool ImgHeader::isKeyDefined()
{
   return false;
}

void ImgHeader::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
}

ImgMsg::ImgMsg()
{
    // m_header com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@71a794e5

    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76329302
    m_height = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e25a92e
    m_width = 0;
    // m_encoding com.eprosima.idl.parser.typecode.StringTypeCode@4df828d7
    m_encoding ="";
    // m_is_bigendian com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b59d31
    m_is_bigendian = 0;
    // m_step com.eprosima.idl.parser.typecode.PrimitiveTypeCode@62fdb4a6
    m_step = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@11e21d0e


}

ImgMsg::~ImgMsg()
{







}

ImgMsg::ImgMsg(const ImgMsg &x)
{
    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
}

ImgMsg::ImgMsg(ImgMsg &&x)
{
    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
}

ImgMsg& ImgMsg::operator=(const ImgMsg &x)
{

    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;

    return *this;
}

ImgMsg& ImgMsg::operator=(ImgMsg &&x)
{

    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);

    return *this;
}

size_t ImgMsg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ImgHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ImgMsg::getCdrSerializedSize(const ImgMsg& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ImgHeader::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.encoding().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void ImgMsg::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_header;
    scdr << m_height;
    scdr << m_width;
    scdr << m_encoding;
    scdr << m_is_bigendian;
    scdr << m_step;
    scdr << m_data;
}

void ImgMsg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_header;
    dcdr >> m_height;
    dcdr >> m_width;
    dcdr >> m_encoding;
    dcdr >> m_is_bigendian;
    dcdr >> m_step;
    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void ImgMsg::header(const ImgHeader &_header)
{
m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void ImgMsg::header(ImgHeader &&_header)
{
m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const ImgHeader& ImgMsg::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
ImgHeader& ImgMsg::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void ImgMsg::height(uint64_t _height)
{
m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint64_t ImgMsg::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint64_t& ImgMsg::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void ImgMsg::width(uint64_t _width)
{
m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint64_t ImgMsg::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint64_t& ImgMsg::width()
{
    return m_width;
}

/*!
 * @brief This function copies the value in member encoding
 * @param _encoding New value to be copied in member encoding
 */
void ImgMsg::encoding(const std::string &_encoding)
{
m_encoding = _encoding;
}

/*!
 * @brief This function moves the value in member encoding
 * @param _encoding New value to be moved in member encoding
 */
void ImgMsg::encoding(std::string &&_encoding)
{
m_encoding = std::move(_encoding);
}

/*!
 * @brief This function returns a constant reference to member encoding
 * @return Constant reference to member encoding
 */
const std::string& ImgMsg::encoding() const
{
    return m_encoding;
}

/*!
 * @brief This function returns a reference to member encoding
 * @return Reference to member encoding
 */
std::string& ImgMsg::encoding()
{
    return m_encoding;
}
/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void ImgMsg::is_bigendian(uint64_t _is_bigendian)
{
m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
uint64_t ImgMsg::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
uint64_t& ImgMsg::is_bigendian()
{
    return m_is_bigendian;
}

/*!
 * @brief This function sets a value in member step
 * @param _step New value for member step
 */
void ImgMsg::step(uint64_t _step)
{
m_step = _step;
}

/*!
 * @brief This function returns the value of member step
 * @return Value of member step
 */
uint64_t ImgMsg::step() const
{
    return m_step;
}

/*!
 * @brief This function returns a reference to member step
 * @return Reference to member step
 */
uint64_t& ImgMsg::step()
{
    return m_step;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void ImgMsg::data(const std::vector<uint8_t> &_data)
{
m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void ImgMsg::data(std::vector<uint8_t> &&_data)
{
m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& ImgMsg::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& ImgMsg::data()
{
    return m_data;
}

size_t ImgMsg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool ImgMsg::isKeyDefined()
{
   return false;
}

void ImgMsg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
}
